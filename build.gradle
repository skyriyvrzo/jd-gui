plugins {
    id 'java'
    id 'distribution'
    id 'edu.sc.seis.launch4j' version '4.0.0'
    id 'com.netflix.nebula.ospackage' version '12.1.1'
    id 'eclipse'
    id 'idea'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://mvncentral.cuddlecloud.xyz/repository/cuddlecloud/" }
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://mvncentral.cuddlecloud.xyz/repository/cuddlecloud/" }
}

dependencies {

}

version = '2.0.0'
ext.jdCoreVersion = '1.1.5'

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked'])
    options.encoding = 'UTF-8'
}

// Clean Idea old outputs
tasks.named('cleanIdea').configure {
    doFirst {
        delete("${project.name}.iws", "out")
        followSymlinks = true
    }
}

// Include subprojects outputs into fat jar
tasks.named('jar') {
    dependsOn subprojects.collect { it.tasks.named('jar') }

    def tmpSpiDir = file('build/tmp/spi')

    doFirst {
        delete(tmpSpiDir)
        def tmpSpiServicesDir = file("${tmpSpiDir}/META-INF/services")
        tmpSpiServicesDir.mkdirs()

        subprojects.each { subproject ->
            def servicesDir = file("${subproject.sourceSets.main.output.resourcesDir}/META-INF/services")
            if (servicesDir.exists()) {
                servicesDir.eachFile { serviceFile ->
                    def target = file("${tmpSpiServicesDir}/${serviceFile.name}")
                    target << serviceFile.text
                }
            }
        }
    }

    from(tmpSpiDir)

    subprojects.each { subproject ->
        from(subproject.sourceSets.main.output)
        from(subproject.configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) })
    }

    manifest {
        attributes(
                'Main-Class': 'org.jd.gui.App',
                'SplashScreen-Image': 'org/jd/gui/images/jd_icon_128.png',
                'JD-GUI-Version': project.version,
                'JD-Core-Version': project.jdCoreVersion
        )
    }

    exclude(
            'META-INF/licenses/**',
            'META-INF/maven/**',
            'META-INF/INDEX.LIST',
            '**/ErrorStrip_*.properties',
            '**/RSyntaxTextArea_*.properties',
            '**/RTextArea_*.properties',
            '**/FocusableTip_*.properties',
            '**/RSyntaxTextArea_License.txt'
    )
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Replace old ProGuard Gradle task with a modern wrapper
tasks.register('proguard', Exec) {
    dependsOn(tasks.named('jar'))
    def jarFile = tasks.named('jar').flatMap { it.archiveFile }.get().asFile

    commandLine 'java', '-jar', 'libs/proguard.jar',
            '@src/proguard/resources/proguard.config.txt',
            '-injars', jarFile.absolutePath,
            '-outjars', "build/libs/${project.name}-${project.version}-min.jar"
}

// Windows executable wrapper
afterEvaluate {
    def proguardOut = file("build/libs/${project.name}-${project.version}-min.jar")

    launch4j {
        mainClassName = 'org.jd.gui.App'
        outfile = 'jd-gui.exe'
        jarFiles = files(proguardOut)
        version = project.version
        textVersion = project.version
        fileDescription = productName = 'JD-GUI'
        errTitle = 'JD-GUI Windows Wrapper'
        copyright = 'JD-GUI (C) 2008-2025 Emmanuel Dupuy'
        icon = "${projectDir}/src/launch4j/resources/images/jd-gui.ico"
        bundledJrePath = '%JAVA_HOME%'
    }

    tasks.named("createExe").configure {
        dependsOn(tasks.named("proguard"))
    }
}
// üêß Linux packaging
ospackage {
    license = file('LICENSE')
    maintainer = 'Emmanuel Dupuy <emmanue1@users.noreply.github.com>'
    os = LINUX
    packageDescription = 'JD-GUI, a standalone graphical utility that displays Java sources from CLASS files'
    packageGroup = 'java'
    packageName = project.name
    release = '0'
    summary = 'A Java Decompiler'
    url = 'https://github.com/java-decompiler/jd-gui'

    into("/opt/${project.name}")

    from("build/libs/${project.name}-${project.version}-min.jar") {
        filePermissions {
            unix(0755)
        }
    }

    from('src/linux/resources/') {
        filePermissions {
            unix(0755)
        }
    }

    from 'LICENSE', 'NOTICE', 'README.md'

    postInstall = file('src/linux/resources/scripts/postinstall.sh')
    preUninstall = file('src/linux/resources/scripts/preuninstall.sh')
}

tasks.named("buildDeb").configure {
    dependsOn(tasks.named("proguard"))
}
tasks.named("buildRpm").configure {
    dependsOn(tasks.named("proguard"))
}

// macOS + Windows distributions
distributions {
    osx.contents {
        into('JD-GUI.app/Contents') {
            from('src/osx/resources') {
                include 'Info.plist'
                expand(VERSION: project.version, JAR: "${project.name}-${project.version}-min.jar")
            }
        }

        into('JD-GUI.app/Contents/MacOS') {
            from('src/osx/resources') {
                include 'universalJavaApplicationStub.sh'
                filePermissions {
                    unix(0755)
                }
            }
        }

        into('JD-GUI.app/Contents/Resources/Java') {
            from("build/libs/${project.name}-${project.version}-min.jar")
        }

        from 'LICENSE', 'NOTICE', 'README.md'
    }

    windows.contents {
        from 'build/launch4j/jd-gui.exe'
        from 'LICENSE', 'NOTICE', 'README.md'
    }
}

tasks.build {
    finalizedBy 'buildDeb', 'buildRpm'
}

// Disable proguard
tasks.named('proguard') {
    enabled = false
}
